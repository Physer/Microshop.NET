name: "[Reusable] Build and publish a .NET service"
concurrency: ci-${{ inputs.service-name }}

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      execute-tests:
        default: true
        type: boolean
      service-path:
        required: true
        type: string
      project-name:
        type: string
        default: API

jobs:
  build-and-publish-services:
    name: Build and publish ${{ inputs.service-name }} service
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.service-path }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0

      - name: Setup .NET Coverage Tool
        run: dotnet tool install -g dotnet-coverage

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        if: ${{ inputs.execute-tests }}
        run: dotnet test --no-restore --verbosity normal -c Release --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Merge coverage reports
        if: ${{ inputs.execute-tests }}
        run: dotnet-coverage merge *.cobertura.xml --recursive --output ./coverage/coverage.merged.xml --output-format cobertura

      - name: Verify code coverage is above 70%
        if: ${{ inputs.execute-tests }}
        shell: pwsh
        run: |
          [XML]$report = Get-Content coverage/coverage.merged.xml

          if ($report.coverage.'line-rate' -lt 0.7) {
            throw "Line coverage is less than 70 percent!"
          }

          if ($report.coverage.'branch-rate' -lt 0.7) {
            throw "Branch coverage is less than 70 percent!"
          }

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: physer/microshop-${{ inputs.service-name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/Dockerfile.dotnet
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SERVICE_NAME=${{ inputs.service-name }}
            PROJECT_NAME=${{ inputs.project-name }}
