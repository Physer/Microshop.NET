name: Deploy required services
concurrency: deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  retrieve-changes:
    name: Retrieve changes
    runs-on: ubuntu-latest
    outputs:
      gateway: ${{ steps.filter.outputs.gateway }}
      indexing: ${{ steps.filter.outputs.indexing }}
      products: ${{ steps.filter.outputs.products }}
      pricing: ${{ steps.filter.outputs.pricing }}
      authentication: ${{ steps.filter.outputs.authentication }}
      admin-ui: ${{ steps.filter.outputs.admin-ui }}
      api: ${{ steps.filter.outputs.api }}
    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            gateway:
              - 'apps/gateway/**'
            indexing:
              - 'apps/indexing/**'
            products:
              - 'apps/products/**'
            pricing:
              - 'apps/pricing/**'
            authentication:
              - 'apps/authentication/**'
            admin-ui:
              - 'apps/admin-ui/**'
            api:
              - 'apps/api/**'

  build-and-publish-gateway-service:
    name: Build and publish gateway service
    needs: retrieve-changes
    if: ${{ needs.retrieve-changes.outputs.gateway == 'true' }}
    uses: ./.github/workflows/build-publish-service.yaml
    secrets:
      docker-username: ${{ secrets.DOCKER_USERNAME }}
      docker-password: ${{ secrets.DOCKER_PASSWORD }}
    with:
      service-name: gateway
      execute-tests: false

  build-and-publish-indexing-service:
    name: Build and publish indexing service
    needs: retrieve-changes
    if: ${{ needs.retrieve-changes.outputs.indexing == 'true' }}
    uses: ./.github/workflows/build-publish-service.yaml
    secrets:
      docker-username: ${{ secrets.DOCKER_USERNAME }}
      docker-password: ${{ secrets.DOCKER_PASSWORD }}
    with:
      service-name: indexing

  build-and-publish-products-service:
    name: Build and publish products service
    needs: retrieve-changes
    if: ${{ needs.retrieve-changes.outputs.products == 'true' }}
    uses: ./.github/workflows/build-publish-service.yaml
    secrets:
      docker-username: ${{ secrets.DOCKER_USERNAME }}
      docker-password: ${{ secrets.DOCKER_PASSWORD }}
    with:
      service-name: products

  build-and-publish-pricing-service:
    name: Build and publish pricing service
    needs: retrieve-changes
    if: ${{ needs.retrieve-changes.outputs.pricing == 'true' }}
    uses: ./.github/workflows/build-publish-service.yaml
    secrets:
      docker-username: ${{ secrets.DOCKER_USERNAME }}
      docker-password: ${{ secrets.DOCKER_PASSWORD }}
    with:
      service-name: pricing

  build-and-publish-authentication-service:
    name: Build and publish authentication service
    needs: retrieve-changes
    if: ${{ needs.retrieve-changes.outputs.authentication == 'true' }}
    uses: ./.github/workflows/build-publish-authentication.yaml
    secrets:
      docker-username: ${{ secrets.DOCKER_USERNAME }}
      docker-password: ${{ secrets.DOCKER_PASSWORD }}

  build-and-publish-admin-ui-service:
    name: Build and publish admin-ui service
    needs: retrieve-changes
    if: ${{ needs.retrieve-changes.outputs.admin-ui == 'true' }}
    uses: ./.github/workflows/build-publish-service.yaml
    with:
      dockerfile-type: webassembly
      service-name: admin-ui
    secrets:
      docker-username: ${{ secrets.DOCKER_USERNAME }}
      docker-password: ${{ secrets.DOCKER_PASSWORD }}

  build-and-publish-api-service:
    name: Build and publish API service
    needs: retrieve-changes
    if: ${{ needs.retrieve-changes.outputs.api == 'true' }}
    uses: ./.github/workflows/build-publish-service.yaml
    with:
      service-name: api
    secrets:
      docker-username: ${{ secrets.DOCKER_USERNAME }}
      docker-password: ${{ secrets.DOCKER_PASSWORD }}

  # deploy_terraform_resources:
  #   name: Deploy resources to Azure using Terraform
  #   if: ${{ always() }}
  #   needs:
  #     [
  #       build-and-publish-indexing-service,
  #       build-and-publish-products-service,
  #       build-and-publish-gateway-service,
  #       build-and-publish-pricing-service,
  #       build-and-publish-authentication-service,
  #       build-and-publish-admin-ui-service,
  #       build-and-publish-api-service,
  #     ]
  #   runs-on: ubuntu-latest
  #   env:
  #     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  #     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  #     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  #     TF_VAR_environment: ${{ vars.ENVIRONMENT }}
  #     TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  #     TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
  #   defaults:
  #     run:
  #       working-directory: infrastructure/terraform
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2

  #     - name: Initialize Terraform
  #       run: terraform init -backend-config="config.azure.tfbackend"

  #     - name: Set Terraform workspace
  #       run: terraform workspace select -or-create production

  #     - name: Plan Terraform
  #       run: terraform plan -no-color -input=false

  #     - name: Apply Terraform
  #       run: terraform apply -auto-approve
